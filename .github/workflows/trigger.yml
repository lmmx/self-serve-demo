name: Send a pipeline trigger back to the originating template repo's GitLab mirror

on:
  push:

jobs:
  trigger-ci:
    if: ${{ github.repository != 'lmmx/self-serve-py-pkg' }}
    runs-on: ubuntu-latest
    steps:
      - name: Greet
        run: |
          echo "Hello from ${{ github.repository_owner }} this is ${{ github.repository }}"
          echo "Hello from $OWNER this is $REPO"
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.repository }}

      - uses: actions/github-script@v6
        id: fetch-repo-and-user-details
        with:
          script: |
            const query = `query($owner:String!, $name:String!) {
              repository(owner:$owner, name:$name) {
                createdAt
                name
                description
                owner {
                  login
                  ... on User {
                    name
                  }
                  ... on Organization {
                    name
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo
            }
            const result = await github.graphql(query, variables)
            console.log(result)
            return result

      - name: Inform and trigger pipeline
        run: |
          export GH_REF=$(echo $GH_REF_HEAD | cut -d\/ -f 3) # e.g. refs/heads/master --> master
          export GH_REPO_NAME=$(echo $INFO | jq -r '.repository.name')
          export GH_AUTHOR_NAME=$(echo $INFO | jq -r '.repository.owner.name')
          export GH_USERNAME=$(echo $INFO | jq -r '.repository.owner.login')
          export GH_DESCRIPTION=$(echo $INFO | jq -r '.repository.description')
          export GH_YEAR_REPO_CREATED=$(echo $INFO | jq -r '.repository.createdAt' | cut -d\- -f 1)
          echo "Hello from $GH_AUTHOR_NAME a.k.a. $GH_USERNAME"
          echo "This is $GH_REPO_NAME created in $GH_YEAR_REPO_CREATED on branch $GH_REF"
          echo "More details: $GH_DESCRIPTION"
          curl -X POST --fail -F token=$PIPELINE_TRIGGER \
                              -F ref=$GH_REF \
                              -F "variables[GH_OWNER]=$GH_OWNER" \
                              -F "variables[GH_REPO]=$GH_REPO" \
                              -F "variables[GH_REPO_URL]=$GH_REPO_URL" \
                              -F "variables[GH_REF]=$GH_REF" \
                              -F "variables[GH_REPO_NAME]=$GH_REPO_NAME" \
                              -F "variables[GH_AUTHOR_NAME]=$GH_AUTHOR_NAME" \
                              -F "variables[GH_USERNAME]=$GH_USERNAME" \
                              -F "variables[GH_DESCRIPTION]=$GH_DESCRIPTION" \
                              -F "variables[GH_YEAR_REPO_CREATED]=$GH_YEAR_REPO_CREATED" \
                              https://gitlab.com/api/v4/projects/$PROJECT_ID/trigger/pipeline
        env:
          INFO: ${{ steps.fetch-repo-and-user-details.outputs.result }}
          PIPELINE_TRIGGER: c608274746d1da1521ace78909c6e6
          PROJECT_ID: 36180497
          GH_OWNER: ${{ github.repository_owner }}
          GH_REPO: ${{ github.repository }}
          GH_REPO_URL: ${{ github.repositoryUrl }}
          GH_REF_HEAD: ${{ github.ref }}

      #- name: Install cookiecutter
      #  run: pip3 install cookiecutter

      #- name: Rebuild contents using cookiecutter
      #  env:
      #    INFO: ${{ steps.fetch-repo-and-user-details.outputs.result }}
      #  run: |
      #    export REPO_NAME=$(echo $INFO | jq -r '.repository.name')
      #    # Run cookiecutter
      #    pushd /tmp
      #    USER_NAME="$(echo $INFO | jq -r .repository.owner.login)"
      #    # Don't put my email into a package if another user uses this template repo
      #    if [[ $USER_NAME == "lmmx" ]]
      #    then
      #      EMAIL="${{ secrets.EMAIL }}"
      #    else
      #      EMAIL=""
      #    fi
      #    cookiecutter gh:lmmx/py-pkg-cc-template --no-input \
      #      lib_name=$REPO_NAME \
      #      description="$(echo $INFO | jq -r .repository.description)" \
      #      github_username=$USER_NAME \
      #      author_name="$(echo $INFO | jq -r .repository.owner.name)"
      #      email="$EMAIL"
      #      year="$(echo $INFO | jq -r .repository.createdAt | cut -d\- -f 1)"
      #    popd
      #    # Move generated content to root directory of repo
      #    mv /tmp/$REPO_NAME/* .
      #    # Delete the setup.yml workflow (and entire workflows dir), it has served its purpose
      #    rm -rf .github/
      #    # Add .github, .gitignore, .pre-commit-config.yaml, .readthedocs.yml:
      #    mv /tmp/$REPO_NAME/.github/ .
      #    mv /tmp/$REPO_NAME/.gitignore .
      #    mv /tmp/$REPO_NAME/.pre-commit-config.yaml .
      #    mv /tmp/$REPO_NAME/.readthedocs.yml .

      #- name: Force push new repo contents
      #  uses: stefanzweifel/git-auto-commit-action@v4
      #  with:
      #    commit_message: "Initial library structure"
      #    push_options: --force
